plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.sonarqube' version '3.5.0.2730'
    id 'jacoco'
}

group = 'com.nagarro'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2022.0.3'
    }
}

dependencies {
    // data sources
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'net.sf.ucanaccess:ucanaccess:5.0.1'
    runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'

    // starters
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Logging
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.apache.logging.log4j:log4j-spring-boot'
    implementation 'org.fusesource.jansi:jansi:2.4.0'

    // unit test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2'

    // Lombok
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    // Security and JWT
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-config'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'

    // OpenAPI
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.7'

    // other
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    implementation 'com.google.code.gson:gson:2.8.9'

}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled true
        html.enabled true
        xml.outputLocation = layout.projectDirectory.file('/src/main/resources/coverage/reports/result.xml')
        csv.outputLocation = layout.projectDirectory.file('/src/main/resources/coverage/reports/result.csv')
//        html.outputLocation = layout.projectDirectory.dir('/src/main/resources/coverage/reports/html')
    }

    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = false
            limit {
                minimum = 0.5
            }
        }
    }
}


sonarqube {
    properties {
        property 'sonar.host.url', 'http://localhost:9000'
        property "sonar.login", "sqp_274c7f839b590b014c64031933b65d6a66680848"
        property "sonar.projectKey", "account"
        property 'sonar.projectName', 'account'
        property 'sonar.java.source', 17
        property 'sonar.junit.reportPaths', 'src/main/resources/coverage/reports'
        property 'encoding', 'UTF-8'
        property 'charSet', 'UTF-8'
        property "sonar.coverage.jacoco.xmlReportPaths", "src/main/resources/coverage/reports/result.xml"
    }
}

tasks.named('sonarqube') {
    dependsOn jacocoTestReport
}
